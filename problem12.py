'''
27/04/2020

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''
import math

# calculate triangle numbers with (n * (n+1))/2

def count_divisors(triangle_number):
    divisors = 2 # count 1 and the number itself
    i = 2
    while True:
        if i > math.sqrt(triangle_number)+1: # +1 to be sure with sqrt rounding
            return False
        if triangle_number % i == 0:
            divisors += 2 # for n=10, 10%2 = 5 and 10%5 = 2. add both as divisors
                                # counting both at the same time also means we only
                                # have to check for divisors until the sqrt of the number
            if divisors > 500:
                return triangle_number
        i += 1

triangle_number = 28 # start at last known triangle number that doesn't fulfill the requirement
n = 5
while not count_divisors(triangle_number):
    n += 1
    triangle_number = (n * (n+1))//2

print(triangle_number)

    